// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// allBurdenStats
List allBurdenStats(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& esm_K, const double& LLc_maf, const bool& LLc_maf_control, const bool normalize_calpha, const bool simplecount_calpha);
RcppExport SEXP buRden_allBurdenStats(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP esm_KSEXP, SEXP LLc_mafSEXP, SEXP LLc_maf_controlSEXP, SEXP normalize_calphaSEXP, SEXP simplecount_calphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type esm_K(esm_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type LLc_maf(LLc_mafSEXP);
    Rcpp::traits::input_parameter< const bool& >::type LLc_maf_control(LLc_maf_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize_calpha(normalize_calphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type simplecount_calpha(simplecount_calphaSEXP);
    __result = Rcpp::wrap(allBurdenStats(ccdata, ccstatus, esm_K, LLc_maf, LLc_maf_control, normalize_calpha, simplecount_calpha));
    return __result;
END_RCPP
}
// allBurdenStatsPerm
List allBurdenStatsPerm(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& nperms, const unsigned& esm_K, const double& LLc_maf, const bool& LLc_maf_control, const bool normalize_calpha, const bool simplecount_calpha);
RcppExport SEXP buRden_allBurdenStatsPerm(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP npermsSEXP, SEXP esm_KSEXP, SEXP LLc_mafSEXP, SEXP LLc_maf_controlSEXP, SEXP normalize_calphaSEXP, SEXP simplecount_calphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nperms(npermsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type esm_K(esm_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type LLc_maf(LLc_mafSEXP);
    Rcpp::traits::input_parameter< const bool& >::type LLc_maf_control(LLc_maf_controlSEXP);
    Rcpp::traits::input_parameter< const bool >::type normalize_calpha(normalize_calphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type simplecount_calpha(simplecount_calphaSEXP);
    __result = Rcpp::wrap(allBurdenStatsPerm(ccdata, ccstatus, nperms, esm_K, LLc_maf, LLc_maf_control, normalize_calpha, simplecount_calpha));
    return __result;
END_RCPP
}
// cAlpha
double cAlpha(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const bool& normalize, const bool& simplecounts);
RcppExport SEXP buRden_cAlpha(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP normalizeSEXP, SEXP simplecountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const bool& >::type normalize(normalizeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type simplecounts(simplecountsSEXP);
    __result = Rcpp::wrap(cAlpha(ccdata, ccstatus, normalize, simplecounts));
    return __result;
END_RCPP
}
// cAlpha_perm
NumericVector cAlpha_perm(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& nperms, const bool& simplecounts);
RcppExport SEXP buRden_cAlpha_perm(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP npermsSEXP, SEXP simplecountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nperms(npermsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type simplecounts(simplecountsSEXP);
    __result = Rcpp::wrap(cAlpha_perm(ccdata, ccstatus, nperms, simplecounts));
    return __result;
END_RCPP
}
// chisq
double chisq(const unsigned& a, const unsigned& b, const unsigned& c, const unsigned& d, const bool& yates);
RcppExport SEXP buRden_chisq(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP dSEXP, SEXP yatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const unsigned& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type c(cSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type d(dSEXP);
    Rcpp::traits::input_parameter< const bool& >::type yates(yatesSEXP);
    __result = Rcpp::wrap(chisq(a, b, c, d, yates));
    return __result;
END_RCPP
}
// chisq_per_marker
NumericVector chisq_per_marker(const IntegerMatrix& ccdata, const IntegerVector& ccstatus);
RcppExport SEXP buRden_chisq_per_marker(SEXP ccdataSEXP, SEXP ccstatusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    __result = Rcpp::wrap(chisq_per_marker(ccdata, ccstatus));
    return __result;
END_RCPP
}
// esm
double esm(const Rcpp::NumericVector& scores, const unsigned& K);
RcppExport SEXP buRden_esm(SEXP scoresSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type K(KSEXP);
    __result = Rcpp::wrap(esm(scores, K));
    return __result;
END_RCPP
}
// esmw
double esmw(const Rcpp::NumericVector& scores, const Rcpp::NumericVector& weights, const unsigned& K);
RcppExport SEXP buRden_esmw(SEXP scoresSEXP, SEXP weightsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type K(KSEXP);
    __result = Rcpp::wrap(esmw(scores, weights, K));
    return __result;
END_RCPP
}
// esm_chisq
double esm_chisq(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& k);
RcppExport SEXP buRden_esm_chisq(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type k(kSEXP);
    __result = Rcpp::wrap(esm_chisq(ccdata, ccstatus, k));
    return __result;
END_RCPP
}
// esm_perm_binary
NumericVector esm_perm_binary(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& nperms, const unsigned& k);
RcppExport SEXP buRden_esm_perm_binary(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP npermsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nperms(npermsSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type k(kSEXP);
    __result = Rcpp::wrap(esm_perm_binary(ccdata, ccstatus, nperms, k));
    return __result;
END_RCPP
}
// filter_sites
Rcpp::IntegerVector filter_sites(const Rcpp::IntegerMatrix& ccdata, const Rcpp::IntegerVector& ccstatus, const double& minfreq, const double& maxfreq, const double& rsq_cutoff);
RcppExport SEXP buRden_filter_sites(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP minfreqSEXP, SEXP maxfreqSEXP, SEXP rsq_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const double& >::type minfreq(minfreqSEXP);
    Rcpp::traits::input_parameter< const double& >::type maxfreq(maxfreqSEXP);
    Rcpp::traits::input_parameter< const double& >::type rsq_cutoff(rsq_cutoffSEXP);
    __result = Rcpp::wrap(filter_sites(ccdata, ccstatus, minfreq, maxfreq, rsq_cutoff));
    return __result;
END_RCPP
}
// MBweights
NumericVector MBweights(const IntegerMatrix& ccdata, const IntegerVector& ccstatus);
RcppExport SEXP buRden_MBweights(SEXP ccdataSEXP, SEXP ccstatusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    __result = Rcpp::wrap(MBweights(ccdata, ccstatus));
    return __result;
END_RCPP
}
// MBstat
Rcpp::List MBstat(const IntegerMatrix& ccdata, const IntegerVector& ccstatus);
RcppExport SEXP buRden_MBstat(SEXP ccdataSEXP, SEXP ccstatusSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    __result = Rcpp::wrap(MBstat(ccdata, ccstatus));
    return __result;
END_RCPP
}
// MB_perm
DataFrame MB_perm(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& nperms);
RcppExport SEXP buRden_MB_perm(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP npermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nperms(npermsSEXP);
    __result = Rcpp::wrap(MB_perm(ccdata, ccstatus, nperms));
    return __result;
END_RCPP
}
// ProductMoment
std::iterator_traits<NumericVector::const_iterator>::value_type ProductMoment(const NumericVector& x, const NumericVector& y);
RcppExport SEXP buRden_ProductMoment(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    __result = Rcpp::wrap(ProductMoment(x, y));
    return __result;
END_RCPP
}
// LLcollapse
List LLcollapse(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const double& maf, const bool& maf_controls);
RcppExport SEXP buRden_LLcollapse(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP mafSEXP, SEXP maf_controlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const double& >::type maf(mafSEXP);
    Rcpp::traits::input_parameter< const bool& >::type maf_controls(maf_controlsSEXP);
    __result = Rcpp::wrap(LLcollapse(ccdata, ccstatus, maf, maf_controls));
    return __result;
END_RCPP
}
// LLcollapse_perm
NumericVector LLcollapse_perm(const IntegerMatrix& ccdata, const IntegerVector& ccstatus, const unsigned& nperms, const double& maf, const bool& maf_controls);
RcppExport SEXP buRden_LLcollapse_perm(SEXP ccdataSEXP, SEXP ccstatusSEXP, SEXP npermsSEXP, SEXP mafSEXP, SEXP maf_controlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type ccdata(ccdataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ccstatus(ccstatusSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type nperms(npermsSEXP);
    Rcpp::traits::input_parameter< const double& >::type maf(mafSEXP);
    Rcpp::traits::input_parameter< const bool& >::type maf_controls(maf_controlsSEXP);
    __result = Rcpp::wrap(LLcollapse_perm(ccdata, ccstatus, nperms, maf, maf_controls));
    return __result;
END_RCPP
}
